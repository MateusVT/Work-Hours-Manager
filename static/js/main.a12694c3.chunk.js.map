{"version":3,"sources":["utils/Cookies.ts","shared/ComponentContext.ts","utils/Http.ts","utils/GoogleFontLoader.tsx","utils/LoginHOC.tsx","utils/MaterialUiTheme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cookies","cookie","parts","document","split","length","decodeURIComponent","str","this","get","value","Number","isNaN","JSON","parse","session","stringify","encodeURIComponent","expiration","Date","toUTCString","context","React","createContext","Provider","Consumer","Http","method","options","callbacks","onError","console","error","onFinish","onSuccess","url","external","path","apiUrl","fetch","body","headers","mountHeaders","then","response","status","has","test","text","catch","reason","json","undefined","message","finally","debug","call","headerParams","accessToken","Authorization","port","memo","fonts","font","weights","LoginHOC","children","enqueueSnackbar","useSnackbar","useContext","ComponentContext","useState","logged","setLogged","useEffect","a","log","variant","users","user","auth","MainTheme","createMuiTheme","spacing","palette","primary","main","overrides","MuiInputLabel","root","color","borderColor","outlined","formControl","shrink","MuiTextField","MuiDrawer","paper","position","MuiButton","label","fontWeight","Guest","loadable","Home","App","connected","setConnected","data","theme","CssBaseline","maxSnack","autoHideDuration","anchorOrigin","horizontal","vertical","logout","set","window","location","reload","login","keepConnected","handleUponLogin","ReactDOM","render","getElementById","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a12694c3.chunk.js","sourcesContent":["type Cookie = \"accessToken\"\r\nclass Cookies {\r\n\tstatic get(cookie: Cookie) {\r\n\t\tconst value = `; ${document.cookie}`\r\n\t\tconst parts = value.split(`; ${cookie}=`)\r\n\r\n\t\tif (parts.length !== 2) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\treturn decodeURIComponent(parts[1].split(\";\")[0])\r\n\t}\r\n\r\n\tstatic getNumber(cookie: Cookie) {\r\n\t\tconst str = this.get(cookie)\r\n\r\n\t\tif (str == null) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\tconst value = Number(str)\r\n\r\n\t\treturn !Number.isNaN(value) ? value : null\r\n\t}\r\n\r\n\tstatic getObject<E = any>(cookie: Cookie): E | null {\r\n\t\tconst str = this.get(cookie)\r\n\r\n\t\treturn str != null ? (JSON.parse(str) as E) : null\r\n\t}\r\n\r\n\tstatic set(cookie: Cookie, value: any | null, session?: boolean) {\r\n\t\tif (value != null) {\r\n\t\t\tif (typeof value === \"object\") {\r\n\t\t\t\tvalue = JSON.stringify(value)\r\n\t\t\t} else {\r\n\t\t\t\tvalue = encodeURIComponent(value)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value != null) {\r\n\t\t\tif (session) {\r\n\t\t\t\tdocument.cookie = `${cookie}=${value}; path=/`\r\n\t\t\t} else {\r\n\t\t\t\tconst expiration = new Date(2100, 1, 1)\r\n\r\n\t\t\t\tdocument.cookie = `${cookie}=${value}; expires=${expiration.toUTCString()}; path=/`\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdocument.cookie = `${cookie}=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/`\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Cookies\r\n","import React from \"react\"\r\nimport { User } from \"../types/Types\"\r\nexport type ComponentContextData = {\r\n\tuser: User //Fullfill this objetct with user infos here.\r\n}\r\n\r\nconst context = React.createContext<Partial<ComponentContextData>>({})\r\nconst { Consumer, Provider } = context\r\n\r\nexport { context as ComponentContext }\r\nexport { Consumer as ComponentContextConsumer }\r\nexport { Provider as ComponentContextProvider }\r\n\r\n","import Cookies from \"./Cookies\"\r\n\r\ntype RequestOptions<E> = {\r\n    body?: any\r\n    external?: boolean\r\n    onError?: (error: any) => void\r\n    onFinish?: () => void\r\n    onSuccess?: (data: E) => void\r\n    path: string\r\n    headers?: Record<string, string>\r\n}\r\n\r\n\r\nclass Http {\r\n    private static readonly port = 8000\r\n    private static readonly apiUrl = `http://localhost:${Http.port}`\r\n\r\n\r\n    static call<E>(method: string, options: RequestOptions<E>) {\r\n        const callbacks = {\r\n            onError: options.onError || console.error,\r\n            onFinish: options.onFinish || (() => { }),\r\n            onSuccess: options.onSuccess || (() => { })\r\n        }\r\n\r\n        const url = options.external ? options.path : `${Http.apiUrl}${options.path}`\r\n\r\n        fetch(url, {\r\n            body: options.body && JSON.stringify(options.body),\r\n            headers: this.mountHeaders(options.headers),\r\n            method: method\r\n        })\r\n            .then(response => {\r\n                const status = response.status\r\n                const re = /(\\btext\\/plain\\b)/\r\n                if (response.headers && response.headers.has('Content-Type')\r\n                    && re.test(response.headers.get('Content-Type')!)) {\r\n                    response.text().then(text => {\r\n                        if (status === 200 || status === 201)\r\n                            callbacks.onSuccess(text as any)\r\n                        else\r\n                            callbacks.onError(text as any)\r\n                    }).catch(reason => {\r\n                        callbacks.onError(reason)\r\n                    })\r\n                } else {\r\n                    response\r\n                        .text()\r\n                        .then(text => {\r\n                            let json: any\r\n\r\n                            try {\r\n                                json = JSON.parse(text)\r\n                            } catch (error) {\r\n                                callbacks.onError(`${error} (body: ${text})`)\r\n\r\n                                return\r\n                            }\r\n\r\n                            if (status === 200 || status === 201) {\r\n                                callbacks.onSuccess(json as E)\r\n                            } else {\r\n                                callbacks.onError(json.message !== undefined ? json.message : json)\r\n                            }\r\n                        })\r\n                        .catch(reason => {\r\n                            callbacks.onError(reason)\r\n                        })\r\n                }\r\n            })\r\n            .catch(reason => {\r\n                callbacks.onError(reason)\r\n            })\r\n            .finally(() => {\r\n                callbacks.onFinish()\r\n                console.debug(`${method} ${options.path} FINISHED`)\r\n            })\r\n    }\r\n\r\n    static delete<E>(options: RequestOptions<E>) {\r\n        return this.call(\"DELETE\", options)\r\n    }\r\n\r\n    static get<E>(options: RequestOptions<E>) {\r\n        return this.call(\"GET\", options)\r\n    }\r\n\r\n    static post<E>(options: RequestOptions<E>) {\r\n        return this.call(\"POST\", options)\r\n    }\r\n\r\n    static put<E>(options: RequestOptions<E>) {\r\n        return this.call(\"PUT\", options)\r\n    }\r\n\r\n    private static mountHeaders(headerParams?: Record<string, string>): Record<string, string> {\r\n        const accessToken = Cookies.get(\"accessToken\")\r\n\r\n        if (accessToken != null) {\r\n            return {\r\n                Authorization: accessToken,\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                ...headerParams\r\n            }\r\n        }\r\n\r\n        return {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            ...headerParams\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Http\r\n","import React from 'react';\r\nimport GoogleFontLoader from 'react-google-font-loader';\r\n\r\n\r\nfunction FontsLoader() {\r\n    return (\r\n        <GoogleFontLoader\r\n            fonts={[\r\n                {\r\n                    font: 'Playfair Display',\r\n                    weights: [400, 800],\r\n                }\r\n            ]}\r\n        />\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default React.memo(FontsLoader);\r\n","import Cookies from 'js-cookie';\r\nimport { useSnackbar } from 'notistack';\r\nimport React, {\r\n  useContext,\r\n  useEffect, useState\r\n} from 'react';\r\nimport { ComponentContext } from '../shared/ComponentContext';\r\nimport { User } from '../types/Types';\r\nimport Http from './Http';\r\n\r\nconst LoginHOC = ({ children }: any) => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const context = useContext(ComponentContext)\r\n  const [logged, setLogged] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    async function auth(): Promise<void> {\r\n      Http.get({\r\n        path: `/users?accessToken=${Cookies.get(\"accessToken\")}`,\r\n        onError: (error: string) => {\r\n          console.log(error)\r\n          enqueueSnackbar('Invalid username', { variant: 'error' })\r\n        },\r\n        onSuccess: (users: User[]) => {\r\n          const user = users[0]\r\n          context.user = user\r\n          setLogged(true)\r\n        }\r\n      })\r\n    }\r\n    auth();\r\n  }, []);\r\n\r\n  return logged ? children : <></>\r\n}\r\nexport default LoginHOC;\r\n\r\n","import { createMuiTheme } from \"@material-ui/core\"\r\n\r\n\r\nconst MainTheme = createMuiTheme({\r\n\r\n    spacing: 5,\r\n    palette: {\r\n        primary: {\r\n            main: \"#e6e6e6\"\r\n        }\r\n    },\r\n\r\n    overrides: {\r\n        MuiInputLabel: {\r\n            root: {\r\n                color: \"white\",\r\n                borderColor: \"white\"\r\n            },\r\n            outlined: { color: \"white\" },\r\n            formControl: {\r\n                color: \"white\"\r\n            },\r\n            shrink: {\r\n                color: \"white\"\r\n            }\r\n        },\r\n        MuiTextField: {\r\n\r\n            root: {\r\n                color: \"white\",\r\n                borderColor: \"white\",\r\n                \"& .MuiOutlinedInput-root\": {\r\n                    color: \"white\"\r\n                },\r\n                \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n                    borderColor: \"white\",\r\n                    color: \"white\"\r\n                },\r\n            }\r\n\r\n        },\r\n        MuiDrawer: {\r\n            paper:\r\n            {\r\n                position: \"unset\"\r\n            }\r\n        },\r\n        MuiButton: {\r\n            label: {\r\n                fontWeight: \"normal\"\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\nexport { MainTheme }\r\n\r\n","import loadable from '@loadable/component';\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { SnackbarProvider } from 'notistack';\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ComponentContextData, ComponentContextProvider } from './shared/ComponentContext';\r\nimport { User } from \"./types/Types\";\r\nimport Cookies from \"./utils/Cookies\";\r\nimport FontsLoader from \"./utils/GoogleFontLoader\";\r\nimport LoginHOC from './utils/LoginHOC';\r\nimport { MainTheme } from \"./utils/MaterialUiTheme\";\r\n\r\nconst Guest = loadable(() => import('./guest/Guest'));\r\nconst Home = loadable(() => import('./main/home/Home'));\r\n\r\nfunction App() {\r\n  const [connected, setConnected] = useState(Cookies.get(\"accessToken\") != null);\r\n  const [data, setData] = useState<Partial<ComponentContextData>>({})\r\n\r\n  function handleUponLogin(user: User, keepConnected: boolean) {\r\n    Cookies.set(\"accessToken\", user.accessToken, !keepConnected)\r\n    if (user) {\r\n      setConnected(true)\r\n    }\r\n  }\r\n  function handleUponLogout() {\r\n    Cookies.set(\"accessToken\", null)\r\n    window.location.reload()\r\n    setConnected(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ComponentContextProvider value={data}>\r\n        <MuiThemeProvider theme={MainTheme}>\r\n          <FontsLoader />\r\n          <CssBaseline />\r\n          <SnackbarProvider maxSnack={3} autoHideDuration={2000} anchorOrigin={{ horizontal: \"right\", vertical: \"bottom\" }} >\r\n            {connected ?\r\n              <LoginHOC >\r\n                <Home logout={handleUponLogout} />\r\n              </LoginHOC>\r\n              : <Guest login={(user) => {\r\n                handleUponLogin(user, true)\r\n              }} />}\r\n          </SnackbarProvider>\r\n        </MuiThemeProvider>\r\n      </ComponentContextProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}